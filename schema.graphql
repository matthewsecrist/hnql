interface Error {
  message: String!
  code: String!
}

type NotFoundError implements Error {
  message: String!
  code: String!
}

enum ItemType {
  Story
  Job
  Comment
  Poll
  PollOpt
}

type PageInfo {
  totalResults: Int!
}

type ReplyNode {
  node: Comment
}

type RepliesConnection {
  pageInfo: PageInfo
  edges: [ReplyNode]!
}

interface Item {
  author: User!
  id: Int!
  type: ItemType!
}

type Story implements Item {
  author: User!
  id: Int!
  replies(first: Int! = 10, after: Int): RepliesConnection!
  score: Int
  title: String!
  type: ItemType!
  url: String
}

type Comment implements Item {
  author: User!
  id: Int!
  replies(first: Int! = 10, after: Int): RepliesConnection!
  text: String!
  type: ItemType!
}

type Job implements Item {
  author: User!
  id: Int!
  score: Int
  title: String!
  type: ItemType!
  url: String
}

type PollOption implements Item {
  author: User!
  id: Int!
  score: Int
  type: ItemType!
  text: String!
}

type PollOptionNode {
  node: PollOption
}

type PollOptionConnection {
  pageInfo: PageInfo
  edges: [PollOptionNode]!
}

type Poll implements Item {
  author: User!
  id: Int!
  score: Int
  title: String!
  type: ItemType!
  replies(first: Int! = 10, after: Int): RepliesConnection!
  options(first: Int! = 10, after: Int): PollOptionConnection!
}

union UserItem = Story | Comment | Job | Poll | PollOption

type UserItemNode {
  node: UserItem
}

type UserItemsConnection {
  pageInfo: PageInfo
  edges: [UserItemNode]!
}

type User {
  about: String
  karma: Int
  username: ID!
  items(first: Int! = 10, after: Int): UserItemsConnection
}

union ItemResult = Story | Comment | Job | Poll | PollOption | NotFoundError
union UserResult = User | NotFoundError

type ItemNode {
  node: ItemResult!
}

type ItemsResult {
  pageInfo: PageInfo,
  edges: [ItemNode]!
}

type JobItemNode {
  node: Job!
}

type JobsResult {
  pageInfo: PageInfo,
  edges: [JobItemNode]!
}

type Query {
  ask(first: Int! = 10, after: Int): ItemsResult!
  best(first: Int! = 10, after: Int): ItemsResult!
  item(id: Int!): ItemResult!
  jobs(first: Int! = 10, after: Int): JobsResult!
  new(first: Int! = 10, after: Int): ItemsResult!
  top(first: Int! = 10, after: Int): ItemsResult!
  user(username: ID!): UserResult!
}
